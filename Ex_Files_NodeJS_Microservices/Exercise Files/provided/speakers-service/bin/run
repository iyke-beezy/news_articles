#!/usr/bin/env node
const axios = require("axios");
const http = require("http");

const config = require("../config")[process.env.NODE_ENV || "development"];

const log = config.log();
const service = require("../server/service")(config);

const server = http.createServer(service);

// Important - a service should not have a fixed port but should randomly choose one
// setting the listen value to 0 allows node to randomly choose any open port
server.listen(0);

server.on("listening", () => {
	// register service on startup
	const registerService = () =>
		axios.put(
			`http://localhost:3000/register/${config.name}/${config.version}/${
				server.address().port
			}`
		);

	// unregister service
	const unregisterService = () =>
		axios.delete(
			`http://localhost:3000/register/${config.name}/${config.version}/${
				server.address().port
			}`
		);

	registerService();

	// ping the service every 20s to keep it alive
	const interval = setInterval(registerService, 20000);

	const cleanup = async () => {
		clearInterval(interval);
		await unregisterService();
	};

	// terminate service on error
	process.on("uncaughtException", async () => {
		await cleanup();
		process.exit(0);
	});

	// terminate service on control c
	process.on("SIGINT", async () => {
		await cleanup();
		process.exit(0);
	});

	// terminate service on control c
	process.on("SIGTERM", async () => {
		await cleanup();
		process.exit(0);
	});

	log.info(
		`Hi there! I'm listening on port ${server.address().port} in ${service.get(
			"env"
		)} mode.`
	);
});
